name: CI Pipeline

# Sacred Geometry: Triggers on 3 events (push, PR, schedule)
on:
  push:
    branches: [ main, claude/* ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sunday at 3:00 AM (sacred 3)
    - cron: '0 3 * * 0'

jobs:
  # Job 1: Linting and Code Quality (3 checks)
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy

      - name: Run flake8
        run: flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        continue-on-error: true

      - name: Run black (check only)
        run: black --check src/
        continue-on-error: true

      - name: Run isort (check only)
        run: isort --check-only src/
        continue-on-error: true

  # Job 2: Unit Tests (3 Python versions for sacred geometry)
  test:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.9', '3.10', '3.11']  # Sacred 3 versions

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libopencv-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Job 3: Docker Build (3 stages)
  docker:
    name: Docker Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build phenomics Docker image
        run: |
          docker build -f docker/phenomics.Dockerfile -t crop-phenohunt/phenomics:test .

      - name: Test Docker image
        run: |
          docker run --rm crop-phenohunt/phenomics:test python -c "import src.phenomics; print('OK')"

  # Job 4: Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run BrAPI integration test
        run: |
          python -c "from src.io.brapi_adapter import load_brapi_traits; print('BrAPI OK')"

      - name: Run genomic selection test
        run: |
          python src/genomics/genomic_selection.py

      - name: Run phenomics pipeline (dry-run)
        run: |
          python scripts/run_pipeline.py --config pipelines/phenomics_pipeline.yml --dry-run

  # Job 5: Benchmarks (track performance)
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run benchmarks
        run: |
          python -c "
          import time
          from src.genomics.genomic_selection import compute_grm
          import pandas as pd
          import numpy as np

          # Benchmark GRM computation
          np.random.seed(369)
          geno = pd.DataFrame(np.random.randint(0, 3, (100, 500)))

          start = time.time()
          G = compute_grm(geno)
          elapsed = time.time() - start

          print(f'GRM computation: {elapsed:.3f}s')
          "

  # Summary job (requires all to pass)
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, docker, integration]

    steps:
      - name: Success
        run: |
          echo "âœ… All CI checks passed!"
          echo "Sacred geometry alignment: 369"
